/** @license MIT License (c) copyright 2010-2016 original author or authors */
/**
 * a with x prepended
 */
export declare function cons<A>(x: A, a: ArrayLike<A>): A[];
/**
 * a with x appended
 */
export declare function append<A>(x: A, a: ArrayLike<A>): A[];
/**
 * Concats two `ArrayLike`s
 */
export declare function concat<A>(a: ArrayLike<A>, b: ArrayLike<A>): A[];
/**
 * drop first n elements
 */
export declare function drop<A>(n: number, a: A[]): A[];
/**
 * drop head element
 */
export declare function tail<A>(a: A[]): A[];
/**
 * duplicate a (shallow duplication)
 */
export declare function copy<A>(a: ArrayLike<A>): A[];
/**
 * transform each element with f
 */
export declare function map<A, B>(f: (a: A) => B, a: ArrayLike<A>): B[];
/**
 * accumulate via left-fold
 */
export declare function reduce<A, B>(f: (a: A, b: B, i: number) => A, z: A, a: ArrayLike<B>): A;
/**
 * replace element at index
 */
export declare function replace<A>(x: A, i: number, a: ArrayLike<A>): A[];
/**
 * remove element at index
 * @throws
 */
export declare function remove<A>(i: number, a: A[]): A[];
/**
 * remove all elements matching a predicate
 * @deprecated
 */
export declare function removeAll<A>(f: (a: A) => boolean, a: ArrayLike<A>): A[];
/**
 * find index of x in a, from the left
 */
export declare function findIndex<A>(x: A, a: ArrayLike<A>): number;
/**
 * Return true iff x is array-like
 */
export declare function isArrayLike(x: any): x is ArrayLike<unknown>;
