(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.mostPrelude = {}));
}(this, (function (exports) { 'use strict';

  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  // Non-mutating array operations
  /**
   * a with x prepended
   */
  function cons(x, a) {
      var l = a.length;
      var b = new Array(l + 1);
      b[0] = x;
      for (var i = 0; i < l; ++i) {
          b[i + 1] = a[i];
      }
      return b;
  }
  /**
   * a with x appended
   */
  function append(x, a) {
      var l = a.length;
      var b = new Array(l + 1);
      for (var i = 0; i < l; ++i) {
          b[i] = a[i];
      }
      b[l] = x;
      return b;
  }
  /**
   * Concats two `ArrayLike`s
   */
  function concat(a, b) {
      var al = a.length;
      var bl = b.length;
      var r = new Array(al + bl);
      var i = 0;
      for (i = 0; i < al; i++) {
          r[i] = a[i];
      }
      for (var j = 0; j < bl; j++) {
          r[i++] = b[j];
      }
      return r;
  }
  //
  /**
   * drop first n elements
   */
  function drop(n, a) {
      if (n < 0) {
          throw new TypeError('n must be >= 0');
      }
      var l = a.length;
      if (n === 0 || l === 0) {
          return a;
      }
      if (n >= l) {
          return [];
      }
      return unsafeDrop(n, a, l - n);
  }
  /**
   * Internal helper for drop
   */
  function unsafeDrop(n, a, l) {
      var b = new Array(l);
      for (var i = 0; i < l; ++i) {
          b[i] = a[n + i];
      }
      return b;
  }
  /**
   * drop head element
   */
  function tail(a) {
      return drop(1, a);
  }
  /**
   * duplicate a (shallow duplication)
   */
  function copy(a) {
      var l = a.length;
      var b = new Array(l);
      for (var i = 0; i < l; ++i) {
          b[i] = a[i];
      }
      return b;
  }
  /**
   * transform each element with f
   */
  function map(f, a) {
      var l = a.length;
      var b = new Array(l);
      for (var i = 0; i < l; ++i) {
          b[i] = f(a[i]);
      }
      return b;
  }
  /**
   * accumulate via left-fold
   */
  function reduce(f, z, a) {
      var r = z;
      for (var i = 0, l = a.length; i < l; ++i) {
          r = f(r, a[i], i);
      }
      return r;
  }
  /**
   * replace element at index
   */
  function replace(x, i, a) {
      if (i < 0) {
          throw new TypeError('i must be >= 0');
      }
      var l = a.length;
      var b = new Array(l);
      for (var j = 0; j < l; ++j) {
          b[j] = i === j ? x : a[j];
      }
      return b;
  }
  /**
   * remove element at index
   * @throws
   */
  function remove(i, a) {
      if (i < 0) {
          throw new TypeError('i must be >= 0');
      }
      var l = a.length;
      if (l === 0 || i >= l) { // exit early if index beyond end of array
          return a;
      }
      if (l === 1) { // exit early if index in bounds and length === 1
          return [];
      }
      return unsafeRemove(i, a, l - 1);
  }
  /**
   * Internal helper to remove element at index
   */
  function unsafeRemove(i, a, l) {
      var b = new Array(l);
      var j;
      for (j = 0; j < i; ++j) {
          b[j] = a[j];
      }
      for (j = i; j < l; ++j) {
          b[j] = a[j + 1];
      }
      return b;
  }
  /**
   * remove all elements matching a predicate
   * @deprecated
   */
  function removeAll(f, a) {
      var l = a.length;
      var b = new Array(l);
      var j = 0;
      for (var x = void 0, i = 0; i < l; ++i) {
          x = a[i];
          if (!f(x)) {
              b[j] = x;
              ++j;
          }
      }
      b.length = j;
      return b;
  }
  /**
   * find index of x in a, from the left
   */
  function findIndex(x, a) {
      for (var i = 0, l = a.length; i < l; ++i) {
          if (x === a[i]) {
              return i;
          }
      }
      return -1;
  }
  /**
   * Return true iff x is array-like
   */
  function isArrayLike(x) {
      return x != null && typeof x.length === 'number' && typeof x !== 'function';
  }

  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  var id = function (x) { return x; };
  var compose = function (f, g) { return function (x) { return f(g(x)); }; };
  var apply = function (f, x) { return f(x); };
  function curry2(f) {
      function curried(a, b) {
          switch (arguments.length) {
              case 0: return curried;
              case 1: return function (b) { return f(a, b); };
              default: return f(a, b);
          }
      }
      return curried;
  }
  function curry3(f) {
      function curried(a, b, c) {
          switch (arguments.length) {
              case 0: return curried;
              case 1: return curry2(function (b, c) { return f(a, b, c); });
              case 2: return function (c) { return f(a, b, c); };
              default: return f(a, b, c);
          }
      }
      return curried;
  }
  function curry4(f) {
      function curried(a, b, c, d) {
          switch (arguments.length) {
              case 0: return curried;
              case 1: return curry3(function (b, c, d) { return f(a, b, c, d); });
              case 2: return curry2(function (c, d) { return f(a, b, c, d); });
              case 3: return function (d) { return f(a, b, c, d); };
              default: return f(a, b, c, d);
          }
      }
      return curried;
  }

  exports.append = append;
  exports.apply = apply;
  exports.compose = compose;
  exports.concat = concat;
  exports.cons = cons;
  exports.copy = copy;
  exports.curry2 = curry2;
  exports.curry3 = curry3;
  exports.curry4 = curry4;
  exports.drop = drop;
  exports.findIndex = findIndex;
  exports.id = id;
  exports.isArrayLike = isArrayLike;
  exports.map = map;
  exports.reduce = reduce;
  exports.remove = remove;
  exports.removeAll = removeAll;
  exports.replace = replace;
  exports.tail = tail;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
